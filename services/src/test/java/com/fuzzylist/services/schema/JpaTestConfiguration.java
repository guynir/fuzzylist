package com.fuzzylist.services.schema;

import com.fuzzylist.services.GlobalConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.Database;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.support.TransactionTemplate;

import javax.sql.DataSource;

/**
 * Spring configuration for JPA tests. Introduces beans that support JPA testing (such as embedded in-memory
 * datasource).
 *
 * @author Guy Raz Nir
 * @since 2025/04/25
 */
@Configuration
@Import(GlobalConfiguration.class)
@EnableTransactionManagement
@EnableJpaRepositories
@EnableAutoConfiguration
public class JpaTestConfiguration {

    /**
     * Produce an in-memory H2 database for testing.
     *
     * @return New H2-base data source.
     */
    @Bean
    public DataSource dataSource() {
        return new EmbeddedDatabaseBuilder()
                .generateUniqueName(true)
                .setType(EmbeddedDatabaseType.H2)
                .build();
    }

    /**
     * Produce a PostgreSQL data source for testing.
     *
     * @param ptm The Platform transaction manager to use. Typically, generated by @DataJpaTest annotation.
     * @return New PostgreSQL data source.
     */
    @Bean
    public TransactionTemplate transactionTemplate(PlatformTransactionManager ptm) {
        return new TransactionTemplate(ptm);
    }

    /**
     * Produce an entity manager factory for JPA testing based on Hibernate.
     *
     * @param dataSource Data source to use. Assumes that the data source is an H2 database.
     * @return New entity manager factory.
     */
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource) {
        // Create a new Hibernate JPA vendor adapter directed to use H2 dialog and always
        // generate DDL.
        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        vendorAdapter.setDatabase(Database.H2);
        vendorAdapter.setGenerateDdl(true);
        vendorAdapter.setShowSql(true);

        // Create a new entity manager factory bean.
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource);
        em.setPackagesToScan("com.fuzzylist.models");
        em.setJpaVendorAdapter(vendorAdapter);

        return em;
    }
}

package com.fuzzylist.controllers;

import com.fuzzylist.services.UnknownListException;
import com.fuzzylist.validation.PropertyConstraintsException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * A controller advice that handles exceptions. Translate exceptions into web responses.
 *
 * @author Guy Raz Nir
 * @since 2024/02/04
 */
@ControllerAdvice
public class RestExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(RestExceptionHandler.class);

    /**
     * A response containing an error message.
     *
     * @param message Error message.
     */
    public record ErrorResponse(String message) {
    }

    /**
     * Generate proper web response for {@link BadRequestException} that includes HTTP status 400 with body
     * containing error message.
     *
     * @param ex Exception instance.
     * @return Error response with message.
     */
    @ExceptionHandler(BadRequestException.class)
    @ResponseBody
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponse handleBadRequest(BadRequestException ex) {
        logger.warn("Handling a bad request exception with message: " + ex.getMessage());
        return new ErrorResponse(ex.getMessage());
    }

    /**
     * Generate proper web response for {@link PropertyConstraintsException} that includes HTTP status 400 with body
     * containing error message.
     *
     * @param ex Exception instance.
     * @return Error response with message.
     */
    @ExceptionHandler(PropertyConstraintsException.class)
    @ResponseBody
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponse handlePropertyContraintException(PropertyConstraintsException ex) {
        logger.warn("Handling a bad request exception with message: " + ex.getMessage());
        return new ErrorResponse(ex.getMessage());
    }

    /**
     * Generate proper web response for {@link UnknownListException} that includes HTTP status 404 (not found)
     * with body containing error message.
     *
     * @return Error response with message.
     */
    @ExceptionHandler(UnknownListException.class)
    @ResponseBody
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ErrorResponse handleUnknownListException() {
        return new ErrorResponse("Unknown list.");
    }

    /**
     * A catch-all exception handler that returns HTTP/500 (internal server error) response.
     * This handler blocks unnecessary data typically generated by Spring to reach the client side.
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public void handleGlobalException(Exception ex) {
        logger.error("Unexpected error.", ex);
    }
}
